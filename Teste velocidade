import cv2
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import time
import tkinter.font as tkfont

# Variáveis globais
cap = None
limite_velocidade = 60.0
camera_address = 0

# Definição dos pontos do delimitador (quadrado)
ponto_inferior_esquerdo = (50, 250)
ponto_superior_direito = (900, 550)

# Inicializa o dicionário de detecção de objetos
objetos_deteccao = {}

def calcular_velocidade(tempo_inicio, tempo_fim, posicao_inicial, posicao_final):
    distancia = posicao_final - posicao_inicial
    tempo = tempo_fim - tempo_inicio
    if tempo > 0:
        velocidade = (distancia / tempo) * 3.6  # De m/s para km/h
        return velocidade
    return 0

def carregar_camera():
    global cap
    cap = cv2.VideoCapture(camera_address)

    if not cap.isOpened():
        messagebox.showerror("Erro", "Falha ao acessar a câmera.")
        return

    last_frame_time = time.time()
    _, frame_anterior = cap.read()
    frame_anterior = cv2.resize(frame_anterior, (640, 480))  # Redimensiona o frame anterior
    frame_anterior_gray = cv2.cvtColor(frame_anterior, cv2.COLOR_BGR2GRAY)
    frame_anterior_gray = cv2.GaussianBlur(frame_anterior_gray, (21, 21), 0)

    def reproduzir_camera():
        nonlocal last_frame_time, frame_anterior_gray
        ret, frame = cap.read()
        if ret:
            frame = cv2.resize(frame, (640, 480))  # Redimensiona o frame atual para o mesmo tamanho
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray = cv2.GaussianBlur(gray, (21, 21), 0)

            # Agora os dois frames estão no mesmo tamanho
            frame_delta = cv2.absdiff(frame_anterior_gray, gray)
            _, thresh = cv2.threshold(frame_delta, 25, 255, cv2.THRESH_BINARY)
            thresh = cv2.dilate(thresh, None, iterations=2)

            contours, _ = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            for contour in contours:
                if cv2.contourArea(contour) < 500:
                    continue

                (x, y, w, h) = cv2.boundingRect(contour)
                centro_objeto = (x + w // 2, y + h // 2)
                posicao_atual = x  # Considerando o eixo X como posição do objeto

                if (ponto_inferior_esquerdo[0] < centro_objeto[0] < ponto_superior_direito[0] and 
                    ponto_inferior_esquerdo[1] < centro_objeto[1] < ponto_superior_direito[1]):
                    
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

                    if (x, y, w, h) not in objetos_deteccao:
                        objetos_deteccao[(x, y, w, h)] = {
                            'tempo_inicio': time.time(),
                            'posicao_inicial': posicao_atual
                        }
                    else:
                        tempo_fim = time.time()
                        tempo_inicio = objetos_deteccao[(x, y, w, h)]['tempo_inicio']
                        posicao_inicial = objetos_deteccao[(x, y, w, h)]['posicao_inicial']
                        velocidade = calcular_velocidade(tempo_inicio, tempo_fim, posicao_inicial, posicao_atual)
                        
                        if velocidade > limite_velocidade:
                            cv2.putText(frame, f"Velocidade: {velocidade:.2f} km/h", (x, y - 10),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

                        # Exibir a velocidade na interface
                        lista_velocidades.insert(tk.END, f"Velocidade: {velocidade:.2f} km/h\n")
                        lista_velocidades.yview(tk.END)

                    # Atualiza a posição e o tempo
                    objetos_deteccao[(x, y, w, h)]['tempo_inicio'] = time.time()
                    objetos_deteccao[(x, y, w, h)]['posicao_inicial'] = posicao_atual

            frame_anterior_gray = gray  # Atualiza o frame anterior

            img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
            imgtk = ImageTk.PhotoImage(image=img)
            label_video.imgtk = imgtk
            label_video.configure(image=imgtk)

        else:
            cap.release()
            messagebox.showinfo("Fim", "A câmera foi desligada.")

        root.after(10, reproduzir_camera)

    reproduzir_camera()
    messagebox.showinfo("Carregar Câmera", "Câmera Carregada!")

def on_closing():
    if cap is not None:
        cap.release()
    root.destroy()

# Interface gráfica
root = tk.Tk()
root.title("Monitoramento de Velocidade")
root.geometry("1000x600")
root.configure(bg="#1c1f24")
root.protocol("WM_DELETE_WINDOW", on_closing)

font_title = tkfont.Font(family="Helvetica", size=20)

title_label = tk.Label(root, text="Revlo", bg="#1c1f24", fg="red", font=font_title)
title_label.place(x=850, y=10)

# Botões customizados
btn_frame = tk.Frame(root, bg="#1c1f24")
btn_frame.place(x=750, y=50)

def estilizar_botao(botao):
    botao.config(bg="#F44336", fg="white", font=("Helvetica", 12), relief="flat")
    botao.pack(pady=10, ipadx=20, ipady=10)

btn_start = tk.Button(btn_frame, text="Iniciar", command=carregar_camera)
estilizar_botao(btn_start)


btn_stop = tk.Button(btn_frame, text="Parar", command=on_closing)
estilizar_botao(btn_stop)

label_video = tk.Label(root)
label_video.place(x=50, y=50)

# Adicionar campo de texto para registrar as velocidades
lista_velocidades = tk.Text(root, height=10, width=40, bg="#1c1f24", fg="white", font=("Helvetica", 12))
lista_velocidades.place(x=750, y=250)

root.mainloop()
